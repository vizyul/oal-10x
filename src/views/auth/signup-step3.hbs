<!-- Sign Up Step 3: Complete Profile -->

<!-- Back Button -->
<div class="step-navigation">
  <a href="/auth/sign-up/verify?email={{email}}" class="back-btn">
    <svg class="back-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
      <path d="M19 12H5"></path>
      <path d="L12 5L5 12L12 19"></path>
    </svg>
    Back
  </a>
  <div class="step-indicator">
    <span class="step-number">3</span>
    <span class="step-total">of 3</span>
  </div>
</div>

<!-- Profile Completion Form -->
<form id="completeForm" class="auth-form" novalidate>
  {{#if csrfToken}}
    <input type="hidden" name="_csrf" value="{{csrfToken}}">
  {{/if}}
  <input type="hidden" name="email" value="{{email}}">
  <input type="hidden" name="token" value="{{token}}">
  <input type="hidden" name="timezone" id="timezoneField" value="">
  
  <!-- Name Fields -->
  <div class="form-row">
    <div class="form-group form-group-half">
      <label for="firstName" class="form-label">First Name</label>
      <input 
        type="text" 
        id="firstName" 
        name="firstName" 
        class="form-control" 
        placeholder="First name"
        required
        autocomplete="given-name"
        autofocus
      >
      <div class="field-error" id="firstName-error"></div>
    </div>
    
    <div class="form-group form-group-half">
      <label for="lastName" class="form-label">Last Name</label>
      <input 
        type="text" 
        id="lastName" 
        name="lastName" 
        class="form-control" 
        placeholder="Last name"
        required
        autocomplete="family-name"
      >
      <div class="field-error" id="lastName-error"></div>
    </div>
  </div>
  
  <!-- Password Field -->
  <div class="form-group">
    <label for="password" class="form-label">Password</label>
    <div class="password-input-wrapper">
      <input 
        type="password" 
        id="password" 
        name="password" 
        class="form-control" 
        placeholder="Create a strong password"
        required
        autocomplete="new-password"
        minlength="8"
      >
      <button type="button" class="password-toggle" id="passwordToggle" aria-label="Show password">
        <svg class="eye-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
          <circle cx="12" cy="12" r="3"></circle>
        </svg>
      </button>
    </div>
    <div class="password-strength" id="passwordStrength"></div>
    <div class="field-error" id="password-error"></div>
    <div class="password-requirements">
      <small class="requirements-text">Password must contain:</small>
      <ul class="requirements-list">
        <li class="requirement" data-requirement="length">At least 8 characters</li>
        <li class="requirement" data-requirement="uppercase">One uppercase letter</li>
        <li class="requirement" data-requirement="lowercase">One lowercase letter</li>
        <li class="requirement" data-requirement="number">One number</li>
        <li class="requirement" data-requirement="special">One special character</li>
      </ul>
    </div>
  </div>
  
  <!-- Terms and Privacy Checkboxes -->
  <div class="form-group checkbox-group">
    <div class="checkbox-wrapper">
      <input 
        type="checkbox" 
        id="terms" 
        name="terms" 
        value="true"
        class="checkbox-input"
        required
      >
      <label for="terms" class="checkbox-label">
        <span class="checkbox-custom"></span>
        <span class="checkbox-text">
          I agree to the 
          <a href="/terms" target="_blank" class="terms-link">Terms & Conditions</a>
        </span>
      </label>
    </div>
    <div class="field-error" id="terms-error"></div>
  </div>
  
  <div class="form-group checkbox-group">
    <div class="checkbox-wrapper">
      <input 
        type="checkbox" 
        id="privacy" 
        name="privacy" 
        value="true"
        class="checkbox-input"
        required
      >
      <label for="privacy" class="checkbox-label">
        <span class="checkbox-custom"></span>
        <span class="checkbox-text">
          I agree to the 
          <a href="/privacy" target="_blank" class="terms-link">Privacy Policy</a>
        </span>
      </label>
    </div>
    <div class="field-error" id="privacy-error"></div>
  </div>
  
  <!-- Marketing Consent (Optional) -->
  <div class="form-group checkbox-group">
    <div class="checkbox-wrapper">
      <input 
        type="checkbox" 
        id="marketing" 
        name="marketing" 
        value="true"
        class="checkbox-input"
      >
      <label for="marketing" class="checkbox-label">
        <span class="checkbox-custom"></span>
        <span class="checkbox-text">
          Send me helpful tips and updates about AI in ministry
        </span>
      </label>
    </div>
  </div>
  
  <!-- Submit Button -->
  <div class="form-group">
    <button type="submit" class="btn btn-primary btn-large btn-block" id="submitBtn">
      Create Account
    </button>
  </div>
  
  <!-- Alternative Sign In -->
  <div class="form-footer">
    <p class="footer-text">Already have an account? 
      <a href="/auth/sign-in" class="auth-link">Sign in</a>
    </p>
  </div>
</form>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
  <div class="loading-content">
    <div class="loading-spinner">
      <svg class="spinner-large" viewBox="0 0 24 24">
        <circle class="spinner-circle" cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"></circle>
      </svg>
    </div>
    <p class="loading-text">Creating your account...</p>
  </div>
</div>

<!-- Success Modal -->
<div class="loading-overlay" id="successModal">
  <div class="loading-content success-modal">
    <div class="success-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" style="width: 80px; height: 80px; color: #10b981;">
        <path d="M9 12l2 2 4-4"></path>
        <circle cx="12" cy="12" r="10"></circle>
      </svg>
    </div>
    <h3 class="modal-title">Welcome to Our AI Legacy!</h3>
    <p class="modal-message">
      Your account has been created successfully. You're now ready to explore 
      the future of AI in ministry with confidence and responsibility.
    </p>
    <button type="button" class="btn btn-primary" onclick="window.location.href='/dashboard'">
      Get Started
    </button>
  </div>
</div>

<script>
// Initialize step 3 form
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('completeForm');
  const passwordField = document.getElementById('password');
  const passwordToggle = document.getElementById('passwordToggle');
  const submitBtn = document.getElementById('submitBtn');
  const loadingOverlay = document.getElementById('loadingOverlay');
  const successModal = document.getElementById('successModal');
  const timezoneField = document.getElementById('timezoneField');
  
  // Automatically detect and set timezone
  if (timezoneField) {
    try {
      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      timezoneField.value = timezone;
    } catch (error) {
      console.log('Unable to detect timezone:', error);
      // Keep empty value, server will use fallback
    }
  }
  
  let isSubmitting = false;

  // Password requirements validation
  setupPasswordValidation(passwordField);
  
  // Password toggle functionality
  setupPasswordToggle(passwordField, passwordToggle);
  
  // Form submission handler
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (isSubmitting) return;
    
    // Simple validation before submit
    const firstName = form.querySelector('[name="firstName"]').value.trim();
    const lastName = form.querySelector('[name="lastName"]').value.trim(); 
    const password = form.querySelector('[name="password"]').value;
    const termsChecked = form.querySelector('[name="terms"]').checked;
    const privacyChecked = form.querySelector('[name="privacy"]').checked;
    
    // Clear previous errors
    document.querySelectorAll('.field-error').forEach(el => {
      el.textContent = '';
      el.style.display = 'none';
    });
    document.querySelectorAll('.form-control, .checkbox-input').forEach(el => {
      el.classList.remove('error');
    });
    
    let hasErrors = false;
    
    if (!firstName || firstName.length < 2) {
      showFieldError('firstName', 'First name must be at least 2 characters');
      hasErrors = true;
    }
    
    if (!lastName || lastName.length < 2) {
      showFieldError('lastName', 'Last name must be at least 2 characters'); 
      hasErrors = true;
    }
    
    if (!password || password.length < 8) {
      showFieldError('password', 'Password must be at least 8 characters');
      hasErrors = true;
    }
    
    if (!termsChecked) {
      showFieldError('terms', 'You must agree to the Terms & Conditions');
      hasErrors = true;
    }
    
    if (!privacyChecked) {
      showFieldError('privacy', 'You must agree to the Privacy Policy');
      hasErrors = true;
    }
    
    if (hasErrors) {
      showAlert('Please fix the errors below', 'error');
      return;
    }
    
    // Prevent double submission
    isSubmitting = true;
    submitBtn.disabled = true;
    loadingOverlay.classList.add('show');
    
    try {
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      
      const response = await fetch('/auth/sign-up/complete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        // Show success modal
        loadingOverlay.classList.remove('show');
        successModal.classList.add('show');
        
        // Auto-redirect after 3 seconds
        setTimeout(() => {
          window.location.href = result.data.redirectTo || '/dashboard';
        }, 3000);
      } else {
        // Show error
        if (result.field) {
          showFieldError(result.field, result.message);
        } else {
          showAlert(result.message || 'Unable to create account. Please try again.', 'error');
        }
      }
    } catch (error) {
      console.error('Complete registration error:', error);
      showAlert('Network error. Please check your connection and try again.', 'error');
    } finally {
      // Re-enable submission
      isSubmitting = false;
      submitBtn.disabled = false;
      loadingOverlay.classList.remove('show');
    }
  });
  
  // Real-time validation
  setupRealTimeValidation(form);
});

// Password validation setup
function setupPasswordValidation(passwordField) {
  if (!passwordField) return;
  
  const requirementsList = document.querySelectorAll('.requirement');
  const strengthIndicator = document.getElementById('passwordStrength');
  
  passwordField.addEventListener('input', function() {
    const password = this.value;
    
    // Check requirements
    const requirements = {
      length: password.length >= 8,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /\d/.test(password),
      special: /[@$!%*?&]/.test(password)
    };
    
    // Update requirement indicators
    requirementsList.forEach(req => {
      const type = req.getAttribute('data-requirement');
      if (requirements[type]) {
        req.classList.add('valid');
      } else {
        req.classList.remove('valid');
      }
    });
    
    // Update strength indicator
    if (strengthIndicator) {
      const score = Object.values(requirements).filter(Boolean).length;
      strengthIndicator.className = 'password-strength';
      
      if (score >= 5) {
        strengthIndicator.classList.add('strong');
      } else if (score >= 4) {
        strengthIndicator.classList.add('good');
      } else if (score >= 3) {
        strengthIndicator.classList.add('fair');
      } else if (score >= 1) {
        strengthIndicator.classList.add('weak');
      }
    }
  });
}

// Password toggle setup
function setupPasswordToggle(passwordField, toggleBtn) {
  if (!passwordField || !toggleBtn) return;
  
  toggleBtn.addEventListener('click', function() {
    const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
    passwordField.setAttribute('type', type);
    
    const icon = toggleBtn.querySelector('.eye-icon');
    if (type === 'text') {
      icon.innerHTML = '<path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line>';
    } else {
      icon.innerHTML = '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle>';
    }
  });
}

// Real-time validation setup
function setupRealTimeValidation(form) {
  const inputs = form.querySelectorAll('input[required]');
  
  inputs.forEach(input => {
    input.addEventListener('blur', function() {
      validateField(this);
    });
    
    input.addEventListener('input', function() {
      if (this.classList.contains('error')) {
        validateField(this);
      }
    });
  });
}

// Validate form
function validateForm() {
  const inputs = document.querySelectorAll('input[required]');
  let isValid = true;
  
  inputs.forEach(input => {
    if (!validateField(input)) {
      isValid = false;
    }
  });
  
  return isValid;
}

// Field validation
function validateField(field) {
  const fieldName = field.name;
  const value = field.value.trim();
  
  let isValid = true;
  let errorMessage = '';
  
  // Required field check
  if (field.hasAttribute('required') && !value) {
    isValid = false;
    errorMessage = `${getFieldLabel(fieldName)} is required`;
  }
  
  // Name validation
  if ((fieldName === 'firstName' || fieldName === 'lastName') && value) {
    if (value.length < 2) {
      isValid = false;
      errorMessage = `${getFieldLabel(fieldName)} must be at least 2 characters`;
    } else if (!/^[A-Za-z\s'-]+$/.test(value)) {
      isValid = false;
      errorMessage = `${getFieldLabel(fieldName)} can only contain letters, spaces, hyphens, and apostrophes`;
    }
  }
  
  // Password validation
  if (fieldName === 'password' && value) {
    if (value.length < 8) {
      isValid = false;
      errorMessage = 'Password must be at least 8 characters long';
    } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/.test(value)) {
      isValid = false;
      errorMessage = 'Password must meet all requirements';
    }
  }
  
  // Checkbox validation
  if (field.type === 'checkbox' && field.hasAttribute('required') && !field.checked) {
    isValid = false;
    if (fieldName === 'terms') {
      errorMessage = 'You must agree to the Terms & Conditions';
    } else if (fieldName === 'privacy') {
      errorMessage = 'You must agree to the Privacy Policy';
    }
  }
  
  // Update UI
  updateFieldValidation(field, isValid, errorMessage);
  
  return isValid;
}

// Update field validation UI
function updateFieldValidation(field, isValid, errorMessage) {
  const errorElement = document.getElementById(`${field.name}-error`);
  
  if (isValid) {
    field.classList.remove('error');
    if (errorElement) {
      errorElement.style.display = 'none';
      errorElement.textContent = '';
    }
  } else {
    field.classList.add('error');
    if (errorElement) {
      errorElement.style.display = 'block';
      errorElement.textContent = errorMessage;
    }
  }
}

// Get field label
function getFieldLabel(fieldName) {
  const labels = {
    firstName: 'First name',
    lastName: 'Last name',
    password: 'Password',
    terms: 'Terms & Conditions',
    privacy: 'Privacy Policy'
  };
  return labels[fieldName] || fieldName;
}

// Show field error
function showFieldError(fieldName, message) {
  const field = document.getElementById(fieldName);
  const errorElement = document.getElementById(`${fieldName}-error`);
  
  if (field && errorElement) {
    field.classList.add('error');
    errorElement.textContent = message;
    errorElement.style.display = 'block';
  }
}

// Show general alert
function showAlert(message, type = 'error') {
  // Remove existing alerts
  const existingAlerts = document.querySelectorAll('.alert.dynamic');
  existingAlerts.forEach(alert => alert.remove());
  
  // Create new alert
  const alert = document.createElement('div');
  alert.className = `alert alert-${type} dynamic`;
  alert.innerHTML = `
    <span class="alert-message">${message}</span>
    <button type="button" class="alert-close" onclick="this.parentElement.remove()">
      <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  `;
  
  // Insert at top of form
  const form = document.querySelector('.auth-form');
  if (form) {
    form.insertBefore(alert, form.firstChild);
  }
  
  // Auto-remove success messages
  if (type === 'success') {
    setTimeout(() => {
      if (alert.parentNode) {
        alert.remove();
      }
    }, 5000);
  }
}
</script>