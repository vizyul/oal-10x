<!-- Sign Up Step 2: Code Verification -->

<!-- Back Button -->
<div class="step-navigation">
  <a href="/auth/sign-up" class="back-btn">
    <svg class="back-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
      <path d="M19 12H5"></path>
      <path d="L12 5L5 12L12 19"></path>
    </svg>
    Back
  </a>
  <div class="step-indicator">
    <span class="step-number">2</span>
    <span class="step-total">of 3</span>
  </div>
</div>

<!-- Verification Form -->
<form id="verifyForm" class="auth-form" novalidate>
  {{#if csrfToken}}
    <input type="hidden" name="_csrf" value="{{csrfToken}}">
  {{/if}}
  <input type="hidden" name="email" value="{{email}}">
  
  <!-- Code Input -->
  <div class="form-group">
    <label for="code" class="form-label">Enter verification code</label>
    <div class="code-input-container">
      <input 
        type="text" 
        id="code" 
        name="code" 
        class="form-control code-input" 
        placeholder="000000"
        maxlength="6"
        pattern="[0-9]{6}"
        required
        autocomplete="one-time-code"
        autofocus
      >
    </div>
    <div class="field-error" id="code-error"></div>
    <div class="field-help">
      We sent a 6-digit code to <strong>{{email}}</strong>
    </div>
  </div>
  
  <!-- Resend Code -->
  <div class="resend-section">
    <p class="resend-text">
      Didn't receive the code? 
      <button type="button" class="resend-btn" id="resendBtn">
        Resend code
      </button>
    </p>
    <div class="resend-timer" id="resendTimer">
      Resend available in <span id="countdown">60</span> seconds
    </div>
  </div>
  
  <!-- Submit Button -->
  <div class="form-group">
    <button type="submit" class="btn btn-primary btn-large btn-block" id="submitBtn">
      <span class="btn-text">Verify Code</span>
      <span class="btn-spinner" id="btnSpinner">
        <svg class="spinner" viewBox="0 0 24 24">
          <circle class="spinner-circle" cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="4"></circle>
        </svg>
      </span>
    </button>
  </div>
</form>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
  <div class="loading-content">
    <div class="loading-spinner">
      <svg class="spinner-large" viewBox="0 0 24 24">
        <circle class="spinner-circle" cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"></circle>
      </svg>
    </div>
    <p class="loading-text">Verifying code...</p>
  </div>
</div>

<script>
// Initialize step 2 form
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('verifyForm');
  const codeField = document.getElementById('code');
  const submitBtn = document.getElementById('submitBtn');
  const resendBtn = document.getElementById('resendBtn');
  const resendTimer = document.getElementById('resendTimer');
  const countdown = document.getElementById('countdown');
  const loadingOverlay = document.getElementById('loadingOverlay');
  const email = '{{email}}';
  
  let isSubmitting = false;
  let resendCountdown = 60;
  let countdownInterval;

  // Start resend countdown
  startResendCountdown();

  // Form submission handler
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (isSubmitting) return;
    
    const code = codeField.value.trim();
    
    // Basic validation
    if (!code) {
      showFieldError('code', 'Verification code is required');
      return;
    }
    
    if (!/^\d{6}$/.test(code)) {
      showFieldError('code', 'Please enter a valid 6-digit code');
      return;
    }
    
    // Clear previous errors
    clearFieldError('code');
    
    // Start loading state
    isSubmitting = true;
    submitBtn.classList.add('loading');
    submitBtn.disabled = true;
    loadingOverlay.classList.add('show');
    
    try {
      const response = await fetch('/auth/sign-up/verify-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({ email, code })
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        // Success - redirect to complete profile step
        window.location.href = result.data.redirectTo;
      } else {
        // Show error
        if (result.field) {
          showFieldError(result.field, result.message);
        } else {
          showAlert(result.message || 'Invalid verification code. Please try again.', 'error');
        }
        
        // If code expired, show resend option
        if (result.error === 'CODE_EXPIRED') {
          resendCountdown = 0;
          updateResendUI();
        }
      }
    } catch (error) {
      console.error('Verify code error:', error);
      showAlert('Network error. Please check your connection and try again.', 'error');
    } finally {
      // End loading state
      isSubmitting = false;
      submitBtn.classList.remove('loading');
      submitBtn.disabled = false;
      loadingOverlay.classList.remove('show');
    }
  });
  
  // Auto-format code input
  codeField.addEventListener('input', function() {
    // Only allow numbers
    this.value = this.value.replace(/\D/g, '');
    
    // Clear error when user starts typing
    if (this.classList.contains('error') && this.value.length > 0) {
      clearFieldError('code');
    }
    
    // Auto-submit when 6 digits entered
    if (this.value.length === 6 && /^\d{6}$/.test(this.value)) {
      // Small delay to show the complete code
      setTimeout(() => {
        if (!isSubmitting) {
          form.dispatchEvent(new Event('submit'));
        }
      }, 300);
    }
  });
  
  // Handle paste event
  codeField.addEventListener('paste', function(e) {
    e.preventDefault();
    const paste = (e.clipboardData || window.clipboardData).getData('text');
    const cleanPaste = paste.replace(/\D/g, '').substring(0, 6);
    this.value = cleanPaste;
    
    // Clear error and auto-submit if valid
    if (cleanPaste.length === 6) {
      clearFieldError('code');
      setTimeout(() => {
        if (!isSubmitting) {
          form.dispatchEvent(new Event('submit'));
        }
      }, 300);
    }
  });
  
  // Resend code handler
  resendBtn.addEventListener('click', async function() {
    if (resendCountdown > 0) return;
    
    this.disabled = true;
    this.textContent = 'Sending...';
    
    try {
      const response = await fetch('/auth/sign-up/resend-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({ email })
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        showAlert('New verification code sent!', 'success');
        resendCountdown = 60;
        startResendCountdown();
        codeField.value = '';
        codeField.focus();
      } else {
        showAlert(result.message || 'Failed to resend code. Please try again.', 'error');
      }
    } catch (error) {
      console.error('Resend code error:', error);
      showAlert('Network error. Please try again.', 'error');
    } finally {
      this.disabled = false;
      this.textContent = 'Resend code';
    }
  });
  
  // Start resend countdown
  function startResendCountdown() {
    clearInterval(countdownInterval);
    updateResendUI();
    
    countdownInterval = setInterval(() => {
      resendCountdown--;
      updateResendUI();
      
      if (resendCountdown <= 0) {
        clearInterval(countdownInterval);
      }
    }, 1000);
  }
  
  // Update resend UI
  function updateResendUI() {
    if (resendCountdown > 0) {
      resendTimer.style.display = 'block';
      resendBtn.style.display = 'none';
      countdown.textContent = resendCountdown;
    } else {
      resendTimer.style.display = 'none';
      resendBtn.style.display = 'inline';
      resendBtn.disabled = false;
    }
  }
});

// Show field error
function showFieldError(fieldName, message) {
  const field = document.getElementById(fieldName);
  const errorElement = document.getElementById(`${fieldName}-error`);
  
  if (field && errorElement) {
    field.classList.add('error');
    errorElement.textContent = message;
    errorElement.classList.add('show');
  }
}

// Clear field error
function clearFieldError(fieldName) {
  const field = document.getElementById(fieldName);
  const errorElement = document.getElementById(`${fieldName}-error`);
  
  if (field && errorElement) {
    field.classList.remove('error');
    errorElement.textContent = '';
    errorElement.classList.remove('show');
  }
}

// Show general alert
function showAlert(message, type = 'error') {
  // Remove existing alerts
  const existingAlerts = document.querySelectorAll('.alert.dynamic');
  existingAlerts.forEach(alert => alert.remove());
  
  // Create new alert
  const alert = document.createElement('div');
  alert.className = `alert alert-${type} dynamic`;
  alert.innerHTML = `
    <span class="alert-message">${message}</span>
    <button type="button" class="alert-close" onclick="this.parentElement.remove()">
      <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  `;
  
  // Insert at top of form
  const form = document.querySelector('.auth-form');
  if (form) {
    form.insertBefore(alert, form.firstChild);
  }
  
  // Auto-remove success messages
  if (type === 'success') {
    setTimeout(() => {
      if (alert.parentNode) {
        alert.remove();
      }
    }, 5000);
  }
}
</script>