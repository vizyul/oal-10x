{{#> layouts/main}}

<div class="video-dashboard">
  <div class="dashboard-top-row">
    <!-- Left Side: Header and Actions -->
    <div class="dashboard-left">
      <div class="dashboard-header">
        <h1>Video Dashboard</h1>
        <p>Manage your video content and AI-generated insights</p>
        
        {{#if subscription}}
        <div class="subscription-info">
          <span class="tier-badge tier-{{subscription.tier}}">{{capitalize subscription.tier}} Plan</span>
          <span class="usage-info">{{subscription.usage.videos}}/{{subscription.limits.videos}} videos used</span>
        </div>
        {{/if}}
      </div>

      <div class="dashboard-actions">
        {{#if (gt subscription.limits.videos 0)}}
        <a href="/videos/upload" class="btn btn-primary">Amplify Videos</a>
        {{else}}
        <a href="/subscription/upgrade" class="btn btn-primary">Upgrade to Upload Videos</a>
        {{/if}}
        {{#if subscription.features.analyticsAccess}}
        <a href="/videos/analytics" class="btn btn-outline">Analytics</a>
        {{/if}}
      </div>
    </div>

    <!-- Right Side: Processing Status Table -->
    <div class="dashboard-right">
      <!-- Video Processing Status Dashboard (shown only when videos are being processed) -->
      <div class="processing-status-container" id="processing-status-container" style="display: none;">
    <div class="status-header">
      <h2>Video Processing Status Dashboard</h2>
      <button class="collapse-btn" id="collapse-status-btn">−</button>
    </div>
    
    <div class="status-content" id="status-content">
      <div class="status-accordion-container">
        <div id="status-accordion-body">
          <!-- Dynamic accordion content will be inserted here -->
        </div>
      </div>
    </div>
  </div>
    </div> <!-- Close dashboard-right -->
  </div> <!-- Close dashboard-top-row -->

  <div class="recent-videos">
    <div class="section-header">
      <h2>All Videos</h2>
      <div class="library-controls">
        <select id="status-filter" class="form-input">
          <option value="">All Status</option>
          <option value="pending">Pending</option>
          <option value="processing">Processing</option>
          <option value="completed">Completed</option>
          <option value="error">Error</option>
        </select>
        <select id="sort-order" class="form-input">
          <option value="newest">Newest First</option>
          <option value="oldest">Oldest First</option>
          <option value="title">Title A-Z</option>
          <option value="status">Status</option>
        </select>
      </div>
    </div>
    
    <div class="video-grid" id="recent-videos-grid">
      <div class="loading-placeholder">Loading videos...</div>
    </div>
    
    <!-- Pagination -->
    <div class="pagination-container" id="pagination-container" style="display: none;">
      <div class="pagination-info">
        <span id="pagination-info">Showing 1-10 of 0 videos</span>
      </div>
      <div class="pagination-controls">
        <button id="prev-page" class="btn btn-secondary btn-small" disabled>Previous</button>
        <span id="page-numbers"></span>
        <button id="next-page" class="btn btn-secondary btn-small" disabled>Next</button>
      </div>
    </div>
  </div>
</div>

<script>
// Load Socket.IO and initialize processing status manager when ready
(function() {
  const script = document.createElement('script');
  script.src = '/socket.io/socket.io.js';
  
  script.onload = function() {
    initializeProcessingManager();
  };
  
  script.onerror = function() {
    // Initialize without Socket.IO (degraded mode)
    initializeProcessingManager();
  };
  
  document.head.appendChild(script);
})();

// Global variable to hold the status manager
let statusManager = null;

function initializeProcessingManager() {
// Processing Status Management
class ProcessingStatusManager {
  constructor() {
    this.socket = null;
    this.processingVideos = new Map();
    this.cancelledVideos = new Set(); // Track cancelled videos to prevent re-adding
    this.isCollapsed = false;
    this.init();
  }

  init() {
    // Initialize Socket.IO connection
    this.initSocket();
    
    // Set up UI event listeners
    this.setupUIListeners();
    
    // Check for processing videos on page load
    this.checkForProcessingVideos();
  }

  async initSocket() {
    // Check if io is available
    if (typeof io === 'undefined') {
      return;
    }
    
    // Get JWT token from secure endpoint
    const token = await this.getAuthToken();
    
    if (!token) {
      return;
    }

    try {
      // Use same origin as the current page
      
      this.socket = io({
        auth: { token: token },
        transports: ['websocket', 'polling'] // Try websocket first, fallback to polling
      });
    } catch (error) {
      return;
    }

    this.socket.on('connect', () => {
      this.socket.emit('request-status');
    });

    this.socket.on('disconnect', () => {
      // Handle disconnect silently
    });

    this.socket.on('processing-status-update', (data) => {
      this.handleStatusUpdate(data);
    });

    this.socket.on('processing-status-batch', (videos) => {
      this.handleStatusBatch(videos);
    });

    this.socket.on('connect_error', (error) => {
      // Handle connection errors silently
    });
  }

  async getAuthToken() {
    try {
      const response = await fetch('/videos/socket-token');
      
      if (response.ok) {
        const data = await response.json();
        return data.token;
      } else {
        return null;
      }
    } catch (error) {
      return null;
    }
  }

  setupUIListeners() {
    const collapseBtn = document.getElementById('collapse-status-btn');
    if (collapseBtn) {
      collapseBtn.addEventListener('click', () => {
        this.toggleCollapse();
      });
    }
  }

  toggleCollapse() {
    const content = document.getElementById('status-content');
    const btn = document.getElementById('collapse-status-btn');
    
    this.isCollapsed = !this.isCollapsed;
    
    if (this.isCollapsed) {
      content.style.display = 'none';
      btn.textContent = '+';
    } else {
      content.style.display = 'block';
      btn.textContent = '−';
    }
  }

  checkForProcessingVideos() {
    // Check URL parameters for recently imported videos
    const urlParams = new URLSearchParams(window.location.search);
    const importedVideos = urlParams.get('imported');
    
    if (importedVideos) {
      // Show the processing status dashboard
      this.showProcessingDashboard();
      
      // Clear the imported parameter but keep others
      const newUrl = new URL(window.location);
      newUrl.searchParams.delete('imported');
      window.history.replaceState({}, '', newUrl.toString());
    }
    
    // Also try to connect and request status regardless of URL params
    // This helps show any ongoing processing from previous sessions
    setTimeout(() => {
      if (this.socket && this.socket.connected) {
        this.socket.emit('request-status');
      }
    }, 1000);
  }

  handleStatusUpdate(data) {
    const { videoId, status } = data;
    
    // Don't add cancelled videos back to processing
    if (this.cancelledVideos.has(videoId)) {
      return;
    }
    
    this.processingVideos.set(videoId, status);
    this.updateStatusTable();
    this.showProcessingDashboard();
  }

  handleStatusBatch(videos) {
    videos.forEach(status => {
      // Don't add cancelled videos back to processing
      if (!this.cancelledVideos.has(status.videoId)) {
        this.processingVideos.set(status.videoId, status);
      }
    });
    
    if (videos.length > 0) {
      this.updateStatusTable();
      this.showProcessingDashboard();
    }
    
    // Refresh completed videos to remove any that are now processing
    if (typeof refreshCompletedVideos === 'function') {
      refreshCompletedVideos();
    }
  }

  showProcessingDashboard() {
    const container = document.getElementById('processing-status-container');
    if (container) {
      container.style.display = 'block';
    }
  }

  hideProcessingDashboard() {
    const container = document.getElementById('processing-status-container');
    if (container) {
      container.style.display = 'none';
    }
  }

  updateStatusTable() {
    const accordionBody = document.getElementById('status-accordion-body');
    if (!accordionBody) {
      return;
    }

    // Store which accordions are currently expanded before updating
    const expandedAccordions = new Set();
    const currentAccordions = accordionBody.querySelectorAll('.accordion-content:not(.hidden)');
    currentAccordions.forEach(accordion => {
      const videoId = accordion.id.replace('accordion-', '');
      expandedAccordions.add(videoId);
    });

    // Convert map to array and sort by start time
    const videos = Array.from(this.processingVideos.values())
      .sort((a, b) => new Date(b.startTime) - new Date(a.startTime));


    if (videos.length === 0) {
      this.hideProcessingDashboard();
      return;
    }
    if (accordionBody) {
      accordionBody.innerHTML = videos.map(video => this.createVideoAccordion(video)).join('');
      
      // Add event listeners for accordion toggles and cancel buttons
      this.setupAccordionEventListeners();
      
      // Restore expanded state for accordions that were previously expanded
      expandedAccordions.forEach(videoId => {
        this.toggleVideoAccordion(videoId, true); // true = force expand
      });
    }

    // Keep the processing dashboard visible even when completed
    // Users can manually collapse it using the collapse button if desired
    
    // Refresh completed videos to show newly completed ones
    const hasActiveProcessing = videos.some(video => 
      !video.completed && (
        video.transcript.status === 'pending' ||
        Object.values(video.content).some(content => content.status === 'pending')
      )
    );

    if (!hasActiveProcessing && typeof refreshCompletedVideos === 'function') {
      refreshCompletedVideos();
    }
  }

  createVideoAccordion(video) {
    const contentTypes = [
      { key: 'transcript', label: 'Transcript', icon: '📝', data: video.transcript },
      { key: 'summary_text', label: 'Summary', icon: '📄', data: video.content['summary_text'] },
      { key: 'study_guide_text', label: 'Study Guide', icon: '📚', data: video.content['study_guide_text'] },
      { key: 'discussion_guide_text', label: 'Discussion Guide', icon: '💬', data: video.content['discussion_guide_text'] },
      { key: 'group_guide_text', label: 'Group Guide', icon: '👥', data: video.content['group_guide_text'] },
      { key: 'social_media_text', label: 'Social Media Posts', icon: '📱', data: video.content['social_media_text'] },
      { key: 'quiz_text', label: 'Quiz', icon: '❓', data: video.content['quiz_text'] },
      { key: 'chapters_text', label: 'Chapters', icon: '📖', data: video.content['chapters_text'] }
    ];
    
    const videoTitle = video.videoTitle || 'Untitled Video';
    const videoTime = this.formatTime(video.startTime);
    const overallProgress = this.calculateProgress(video);
    
    return `
      <div class="video-accordion" data-video-id="${video.videoId}">
        <div class="accordion-header-wrapper">
          <button class="accordion-header" data-accordion-toggle="${video.videoId}">
            <div class="video-info">
              <div class="video-title" title="${videoTitle}">${videoTitle}</div>
              <div class="video-meta">
                <span class="video-time">${videoTime}</span>
                <span class="video-progress">${overallProgress.completed}/${overallProgress.total} completed</span>
              </div>
            </div>
            <div class="accordion-chevron">▼</div>
          </button>
          <button class="cancel-button" data-cancel-video="${video.videoId}" title="Cancel processing">
            Cancel
          </button>
        </div>
        <div class="accordion-content hidden" id="accordion-${video.videoId}">
          <ul class="processing-list">
            ${contentTypes.map(type => `
              <li class="processing-item ${this.getStatusClass(type.data?.status)}">
                <div class="status-indicator">
                  <div class="status-box ${this.getStatusClass(type.data?.status)}">
                    ${this.getAccordionStatusIcon(type.data?.status)}
                  </div>
                </div>
                <div class="content-info">
                  <span class="content-icon">${type.icon}</span>
                  <span class="content-label">${type.label}</span>
                </div>
                <div class="content-actions">
                  ${type.data?.status === 'completed' ? `
                    <button class="view-content-btn" 
                            data-video-id="${video.videoId}" 
                            data-content-type="${type.key}" 
                            data-content-label="${type.label}"
                            title="View ${type.label}">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                      </svg>
                      View
                    </button>
                  ` : ''}
                  ${type.data?.status === 'failed' ? `<div class="error-info" title="${type.data?.error || 'Processing failed'}">⚠️</div>` : ''}
                </div>
              </li>
            `).join('')}
          </ul>
        </div>
      </div>
    `;
  }

  setupAccordionEventListeners() {
    // Set up accordion toggle listeners
    const accordionHeaders = document.querySelectorAll('[data-accordion-toggle]');
    accordionHeaders.forEach(header => {
      header.addEventListener('click', (e) => {
        e.preventDefault();
        const videoId = header.getAttribute('data-accordion-toggle');
        this.toggleVideoAccordion(videoId);
      });
    });

    // Set up cancel button listeners
    const cancelButtons = document.querySelectorAll('[data-cancel-video]');
    cancelButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const videoId = button.getAttribute('data-cancel-video');
        this.cancelVideoProcessing(videoId);
      });
    });

    // Set up view content button listeners
    const viewContentButtons = document.querySelectorAll('.view-content-btn');
    viewContentButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation(); // Prevent accordion toggle
        const videoId = button.getAttribute('data-video-id');
        const contentType = button.getAttribute('data-content-type');
        const contentLabel = button.getAttribute('data-content-label');
        this.viewContent(videoId, contentType, contentLabel);
      });
    });
  }

  toggleVideoAccordion(videoId, forceExpand = false) {
    const accordionContent = document.getElementById(`accordion-${videoId}`);
    const header = accordionContent?.previousElementSibling?.querySelector('.accordion-header');
    const chevron = header?.querySelector('.accordion-chevron');
    
    if (accordionContent) {
      const isCurrentlyOpen = !accordionContent.classList.contains('hidden');
      
      if (forceExpand || !isCurrentlyOpen) {
        // Expand
        accordionContent.classList.remove('hidden');
        if (chevron) chevron.textContent = '▲';
        header?.classList.add('expanded');
      } else if (!forceExpand && isCurrentlyOpen) {
        // Collapse (only if not forcing expand)
        accordionContent.classList.add('hidden');
        if (chevron) chevron.textContent = '▼';
        header?.classList.remove('expanded');
      }
    }
  }

  async viewContent(videoId, contentType, contentLabel) {
    try {
      // Show loading state
      const loadingModal = this.showLoadingModal(`Loading ${contentLabel}...`);
      
      // Fetch content from API
      const response = await fetch(`/api/videos/${videoId}/content/${contentType}`);
      const result = await response.json();
      
      // Hide loading modal
      loadingModal.remove();
      
      if (result.success && result.data) {
        this.showContentModal(contentLabel, result.data.content, contentType);
      } else {
        // More specific error messages based on response
        let errorMessage = `Failed to load ${contentLabel}`;
        if (result.message) {
          if (result.message.includes('not found') || result.message.includes('not yet generated')) {
            errorMessage = `${contentLabel} is not available yet. The content may still be generating or failed to generate.`;
          } else {
            errorMessage += `: ${result.message}`;
          }
        }
        this.showError(errorMessage);
      }
    } catch (error) {
      console.error(`Error loading content ${contentType}:`, error);
      this.showError(`Failed to load ${contentLabel}. Please try again.`);
    }
  }

  showContentModal(title, content, contentType) {
    // Create modal backdrop
    const modalBackdrop = document.createElement('div');
    modalBackdrop.className = 'content-modal-backdrop';
    
    // Format content based on type
    let formattedContent = content;
    if (contentType === 'quiz_text') {
      // Format quiz content with better styling
      formattedContent = this.formatQuizContent(content);
    } else if (contentType === 'social_media_text') {
      // Format social media posts
      formattedContent = this.formatSocialMediaContent(content);
    }
    
    // Create modal content
    modalBackdrop.innerHTML = `
      <div class="content-modal">
        <div class="content-modal-header">
          <h3>${title}</h3>
          <button class="content-modal-close" aria-label="Close">&times;</button>
        </div>
        <div class="content-modal-body">
          <div class="content-display">${formattedContent}</div>
        </div>
        <div class="content-modal-footer">
          <button class="btn btn-secondary copy-content-btn">Copy Content</button>
          <button class="btn btn-primary content-modal-close-btn">Close</button>
        </div>
      </div>
    `;
    
    // Add to page
    document.body.appendChild(modalBackdrop);
    
    // Get buttons and elements
    const closeBtn = modalBackdrop.querySelector('.content-modal-close');
    const closeBtnFooter = modalBackdrop.querySelector('.content-modal-close-btn');
    const copyBtn = modalBackdrop.querySelector('.copy-content-btn');
    
    // Close handlers
    const closeModal = () => {
      modalBackdrop.remove();
      document.body.style.overflow = ''; // Restore scrolling
    };
    
    closeBtn.addEventListener('click', closeModal);
    closeBtnFooter.addEventListener('click', closeModal);
    
    // Copy content handler
    copyBtn.addEventListener('click', () => {
      navigator.clipboard.writeText(content).then(() => {
        copyBtn.textContent = 'Copied!';
        setTimeout(() => {
          copyBtn.textContent = 'Copy Content';
        }, 2000);
      }).catch(() => {
        this.showError('Failed to copy content to clipboard');
      });
    });
    
    // Handle backdrop click
    modalBackdrop.addEventListener('click', (e) => {
      if (e.target === modalBackdrop) {
        closeModal();
      }
    });
    
    // Handle ESC key
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        closeModal();
        document.removeEventListener('keydown', handleEscape);
      }
    };
    document.addEventListener('keydown', handleEscape);
    
    // Prevent body scroll when modal is open
    document.body.style.overflow = 'hidden';
    
    // Show modal with animation
    setTimeout(() => {
      modalBackdrop.classList.add('show');
    }, 10);
  }

  formatQuizContent(content) {
    // Basic quiz formatting - could be enhanced based on actual content structure
    return content.replace(/Q\d+:/g, '<strong>$&</strong>').replace(/\n/g, '<br>');
  }

  formatSocialMediaContent(content) {
    // Format social media posts with hashtags highlighted
    return content
      .replace(/#\w+/g, '<span class="hashtag">$&</span>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/^\w/, '<p>$&')
      .replace(/\w$/, '$&</p>');
  }

  showLoadingModal(message) {
    const loadingModal = document.createElement('div');
    loadingModal.className = 'loading-modal-backdrop';
    loadingModal.innerHTML = `
      <div class="loading-modal">
        <div class="loading-spinner"></div>
        <p>${message}</p>
      </div>
    `;
    document.body.appendChild(loadingModal);
    
    setTimeout(() => {
      loadingModal.classList.add('show');
    }, 10);
    
    return loadingModal;
  }

  showError(message) {
    // Reuse existing notification system
    this.showCancelNotification(message, 'error');
  }

  async showAllContentModal(videoId, videoTitle) {
    try {
      // Show loading
      const loadingModal = this.showLoadingModal('Loading content list...');
      
      // Fetch video data to get all available content
      const response = await fetch(`/api/videos/${videoId}`);
      const result = await response.json();
      
      loadingModal.remove();
      
      if (result.success && result.data) {
        const video = result.data;
        
        // Content types to check
        const contentTypes = [
          { key: 'transcript_text', label: 'Transcript', icon: '📝', apiKey: 'transcript' },
          { key: 'summary_text', label: 'Summary', icon: '📄', apiKey: 'summary_text' },
          { key: 'study_guide_text', label: 'Study Guide', icon: '📚', apiKey: 'study_guide_text' },
          { key: 'discussion_guide_text', label: 'Discussion Guide', icon: '💬', apiKey: 'discussion_guide_text' },
          { key: 'group_guide_text', label: 'Group Guide', icon: '👥', apiKey: 'group_guide_text' },
          { key: 'social_media_text', label: 'Social Media', icon: '📱', apiKey: 'social_media_text' },
          { key: 'quiz_text', label: 'Quiz', icon: '❓', apiKey: 'quiz_text' },
          { key: 'chapters_text', label: 'Chapters', icon: '📖', apiKey: 'chapters_text' }
        ];

        // Filter available content
        const availableContent = contentTypes.filter(type => {
          return video[type.key] && video[type.key].trim() !== '';
        });

        if (availableContent.length === 0) {
          this.showError('No content available for this video yet.');
          return;
        }

        // Create modal
        this.showContentListModal(videoTitle, videoId, availableContent);
      } else {
        this.showError('Failed to load video content list.');
      }
    } catch (error) {
      console.error('Error loading content list:', error);
      this.showError('Failed to load content list. Please try again.');
    }
  }

  showContentListModal(videoTitle, videoId, availableContent) {
    // Create modal backdrop
    const modalBackdrop = document.createElement('div');
    modalBackdrop.className = 'content-list-modal-backdrop';
    
    modalBackdrop.innerHTML = `
      <div class="content-list-modal">
        <div class="content-list-modal-header">
          <h3>Content for "${videoTitle}"</h3>
          <button class="content-modal-close" aria-label="Close">&times;</button>
        </div>
        <div class="content-list-modal-body">
          <div class="content-list-grid">
            ${availableContent.map(content => `
              <button class="content-list-item" 
                      data-video-id="${videoId}" 
                      data-content-type="${content.apiKey}" 
                      data-content-label="${content.label}">
                <div class="content-list-icon">${content.icon}</div>
                <div class="content-list-label">${content.label}</div>
                <div class="content-list-action">View →</div>
              </button>
            `).join('')}
          </div>
        </div>
        <div class="content-list-modal-footer">
          <button class="btn btn-primary content-modal-close-btn">Close</button>
        </div>
      </div>
    `;
    
    // Add to page
    document.body.appendChild(modalBackdrop);
    
    // Get elements
    const closeBtn = modalBackdrop.querySelector('.content-modal-close');
    const closeBtnFooter = modalBackdrop.querySelector('.content-modal-close-btn');
    const contentItems = modalBackdrop.querySelectorAll('.content-list-item');
    
    // Close handlers
    const closeModal = () => {
      modalBackdrop.remove();
      document.body.style.overflow = '';
    };
    
    closeBtn.addEventListener('click', closeModal);
    closeBtnFooter.addEventListener('click', closeModal);
    
    // Content item handlers
    contentItems.forEach(item => {
      item.addEventListener('click', () => {
        const contentType = item.getAttribute('data-content-type');
        const contentLabel = item.getAttribute('data-content-label');
        closeModal();
        // Small delay to let the modal close first
        setTimeout(() => {
          this.viewContent(videoId, contentType, contentLabel);
        }, 200);
      });
    });
    
    // Handle backdrop click
    modalBackdrop.addEventListener('click', (e) => {
      if (e.target === modalBackdrop) {
        closeModal();
      }
    });
    
    // Handle ESC key
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        closeModal();
        document.removeEventListener('keydown', handleEscape);
      }
    };
    document.addEventListener('keydown', handleEscape);
    
    // Prevent body scroll
    document.body.style.overflow = 'hidden';
    
    // Show modal with animation
    setTimeout(() => {
      modalBackdrop.classList.add('show');
    }, 10);
  }

  async cancelVideoProcessing(videoId) {
    const video = this.processingVideos.get(videoId);
    const videoTitle = video?.videoTitle || 'this video';
    
    // Show custom confirmation modal instead of alert
    const confirmed = await this.showConfirmationModal(
      'Cancel Video Processing',
      `Are you sure you want to cancel processing for "${videoTitle}"?`,
      'This action cannot be undone and will permanently stop all content generation for this video.',
      'Cancel Processing',
      'Keep Processing'
    );
    
    if (!confirmed) {
      return;
    }
    
    try {
      // Find the video record ID from the processing manager
      const videoRecordId = video?.videoRecordId;
      
      if (!videoRecordId) {
        console.error('Video record ID not found for:', videoId);
        this.showCancelNotification('Failed to cancel processing - video record not found', 'error');
        return;
      }
      
      // Show loading state
      const cancelButton = document.querySelector(`[data-cancel-video="${videoId}"]`);
      const originalText = cancelButton?.textContent;
      if (cancelButton) {
        cancelButton.textContent = 'Canceling...';
        cancelButton.disabled = true;
      }
      
      // Make API call to cancel processing
      const response = await fetch(`/api/videos/${videoRecordId}/cancel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      const result = await response.json();
      
      if (result.success) {
        // Add to cancelled videos set to prevent re-adding
        this.cancelledVideos.add(videoId);
        
        // Remove the video from processing manager
        this.processingVideos.delete(videoId);
        this.updateStatusTable();
        
        // If no more processing videos, hide the dashboard
        if (this.processingVideos.size === 0) {
          this.hideProcessingDashboard();
        }
        
        this.showCancelNotification('Video processing cancelled successfully', 'success');
        
        // Refresh the completed videos to show updated status
        if (typeof refreshCompletedVideos === 'function') {
          refreshCompletedVideos();
        }
      } else {
        throw new Error(result.message || 'Failed to cancel video processing');
      }
      
    } catch (error) {
      console.error('Error canceling video processing:', error);
      this.showCancelNotification(error.message || 'Failed to cancel video processing', 'error');
      
      // Restore button state
      const cancelButton = document.querySelector(`[data-cancel-video="${videoId}"]`);
      if (cancelButton) {
        cancelButton.textContent = 'Cancel';
        cancelButton.disabled = false;
      }
    }
  }

  showCancelNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `cancel-notification cancel-notification-${type}`;
    notification.innerHTML = `
      <div class="cancel-notification-content">
        <span class="cancel-notification-message">${message}</span>
        <button class="cancel-notification-close">&times;</button>
      </div>
    `;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Add close functionality
    const closeBtn = notification.querySelector('.cancel-notification-close');
    closeBtn.addEventListener('click', () => {
      notification.remove();
    });
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 5000);
    
    // Animate in
    setTimeout(() => {
      notification.classList.add('show');
    }, 100);
  }

  showConfirmationModal(title, message, details, confirmText = 'Confirm', cancelText = 'Cancel') {
    return new Promise((resolve) => {
      // Create modal backdrop
      const modalBackdrop = document.createElement('div');
      modalBackdrop.className = 'confirmation-modal-backdrop';
      
      // Create modal content
      modalBackdrop.innerHTML = `
        <div class="confirmation-modal">
          <div class="confirmation-modal-header">
            <h3>${title}</h3>
          </div>
          <div class="confirmation-modal-body">
            <div class="confirmation-message">${message}</div>
            ${details ? `<div class="confirmation-details">${details}</div>` : ''}
          </div>
          <div class="confirmation-modal-footer">
            <button class="btn btn-secondary confirmation-cancel">${cancelText}</button>
            <button class="btn btn-danger confirmation-confirm">${confirmText}</button>
          </div>
        </div>
      `;
      
      // Add to page
      document.body.appendChild(modalBackdrop);
      
      // Get buttons
      const confirmBtn = modalBackdrop.querySelector('.confirmation-confirm');
      const cancelBtn = modalBackdrop.querySelector('.confirmation-cancel');
      
      // Handle confirm
      confirmBtn.addEventListener('click', () => {
        modalBackdrop.remove();
        resolve(true);
      });
      
      // Handle cancel
      cancelBtn.addEventListener('click', () => {
        modalBackdrop.remove();
        resolve(false);
      });
      
      // Handle backdrop click
      modalBackdrop.addEventListener('click', (e) => {
        if (e.target === modalBackdrop) {
          modalBackdrop.remove();
          resolve(false);
        }
      });
      
      // Handle ESC key
      const handleEscape = (e) => {
        if (e.key === 'Escape') {
          modalBackdrop.remove();
          document.removeEventListener('keydown', handleEscape);
          resolve(false);
        }
      };
      document.addEventListener('keydown', handleEscape);
      
      // Show modal with animation
      setTimeout(() => {
        modalBackdrop.classList.add('show');
      }, 10);
      
      // Focus the cancel button by default (safer option)
      setTimeout(() => {
        cancelBtn.focus();
      }, 100);
    });
  }

  getStatusClass(status) {
    switch (status) {
      case 'completed': return 'status-completed';
      case 'pending': return 'status-pending';
      case 'failed': return 'status-failed';
      case 'skipped': return 'status-skipped';
      default: return 'status-pending';
    }
  }

  getStatusIcon(status) {
    switch (status) {
      case 'completed': return '<span class="status-icon completed">✓</span>';
      case 'pending': return '<span class="status-icon pending">⏳</span>';
      case 'failed': return '<span class="status-icon failed">✗</span>';
      case 'skipped': return '<span class="status-icon skipped">−</span>';
      default: return '<span class="status-icon pending">⏳</span>';
    }
  }

  getAccordionStatusIcon(status) {
    switch (status) {
      case 'completed': return '✓';
      case 'pending': return '⧗';
      case 'failed': return '✗';
      case 'skipped': return '−';
      default: return '⧗';
    }
  }

  calculateProgress(video) {
    const contentTypes = ['summary_text', 'study_guide_text', 'discussion_guide_text', 'group_guide_text', 'social_media_text', 'quiz_text', 'chapters_text'];
    let completed = 0;
    let total = contentTypes.length + 1; // +1 for transcript
    
    // Check transcript
    if (video.transcript?.status === 'completed') completed++;
    
    // Check content types
    contentTypes.forEach(type => {
      if (video.content[type]?.status === 'completed') completed++;
    });
    
    return { completed, total };
  }

  truncateText(text, maxLength) {
    if (!text) return 'Untitled Video';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  }

  formatTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }
}

// Initialize processing status manager
statusManager = new ProcessingStatusManager();

// Load completed videos and populate processing table after a brief delay
setTimeout(() => {
  loadCompletedVideos();
  populateProcessingTable();
  setupFilteringEventListeners();
}, 1500);
}

// Global variables for pagination and filtering
let currentPage = 1;
let totalPages = 1;
let currentFilters = {};

async function loadCompletedVideos() {
  try {
    // Build query parameters for pagination and filtering
    const params = new URLSearchParams({
      page: currentPage,
      limit: 12,
      ...currentFilters
    });
    
    const videosResponse = await fetch(`/api/videos?${params}`);
    
    if (!videosResponse.ok) {
      throw new Error(`HTTP ${videosResponse.status}: ${videosResponse.statusText}`);
    }
    
    const videosData = await videosResponse.json();
    
    const gridElement = document.getElementById('recent-videos-grid');
    if (!gridElement) {
      return;
    }
    
    if (videosData.success && videosData.data) {
      const { videos, pagination } = videosData.data;
      
      // Update pagination controls
      updatePagination(pagination);
      
      if (videos?.length > 0) {
        // Show all videos (not just completed ones) since we now have filtering
        let displayVideos = videos.filter(video => {
          return !statusManager?.cancelledVideos.has(video.id);
        });
      
        if (displayVideos.length > 0) {
        // Generate HTML for all videos
        gridElement.innerHTML = displayVideos.map(video => {
          const videoId = video.videoid || video.id;
          const status = video.status || 'completed';
          
          // Content types to check for completed content
          const contentTypes = [
            { key: 'transcript_text', label: 'Transcript', icon: '📝' },
            { key: 'summary_text', label: 'Summary', icon: '📄' },
            { key: 'study_guide_text', label: 'Study Guide', icon: '📚' },
            { key: 'discussion_guide_text', label: 'Discussion Guide', icon: '💬' },
            { key: 'group_guide_text', label: 'Group Guide', icon: '👥' },
            { key: 'social_media_text', label: 'Social Media', icon: '📱' },
            { key: 'quiz_text', label: 'Quiz', icon: '❓' },
            { key: 'chapters_text', label: 'Chapters', icon: '📖' }
          ];

          // Find available content - be more strict about what constitutes "available"
          const availableContent = contentTypes.filter(type => {
            const content = video[type.key];
            return content && 
                   typeof content === 'string' && 
                   content.trim() !== '' && 
                   content.trim() !== 'null' && 
                   content.trim() !== 'undefined' &&
                   content.length > 10; // Minimum meaningful content length
          });

          return `
            <div class="video-card" data-video-id="${videoId}">
              <div class="video-info">
                <h4 class="video-title">${video.video_title || 'Untitled Video'}</h4>
                <p class="video-channel">${video.channel_name || 'Unknown Channel'}</p>
                <div class="video-status status-${status}">${status.toUpperCase()}</div>
                ${availableContent.length > 0 ? `
                  <div class="video-content-summary">
                    <span class="content-count">${availableContent.length} content item(s) available</span>
                  </div>
                ` : ''}
              </div>
              ${availableContent.length > 0 ? `
                <div class="video-actions">
                  <div class="content-buttons-grid">
                    ${availableContent.slice(0, 4).map(content => `
                      <button class="view-content-btn-grid" 
                              data-video-id="${videoId}" 
                              data-content-type="${content.key === 'transcript_text' ? 'transcript' : content.key}" 
                              data-content-label="${content.label}"
                              title="View ${content.label}">
                        <span class="content-icon">${content.icon}</span>
                        <span class="content-label">${content.label}</span>
                      </button>
                    `).join('')}
                    ${availableContent.length > 4 ? `
                      <button class="view-all-content-btn" 
                              data-video-id="${videoId}" 
                              data-video-title="${video.video_title || 'Untitled Video'}"
                              title="View all content">
                        <span class="content-icon">⋯</span>
                        <span class="content-label">+${availableContent.length - 4} more</span>
                      </button>
                    ` : ''}
                  </div>
                </div>
              ` : ''}
            </div>
          `;
        }).join('');
        
        // Set up event listeners for content view buttons
        setupVideoCardEventListeners();
        } else {
          showEmptyState(gridElement);
        }
      } else {
        showEmptyState(gridElement);
      }
    } else {
      if (!videosData.success) {
        gridElement.innerHTML = `<div class="error-state">
          API Error: ${videosData.message || 'Failed to load videos'}
        </div>`;
      } else {
        showEmptyState(gridElement);
      }
    }
  } catch (error) {
    
    const gridElement = document.getElementById('recent-videos-grid');
    if (gridElement) {
      gridElement.innerHTML = `<div class="error-state">
        Failed to load videos: ${error.message}
        <br><small>Check console for details</small>
      </div>`;
    }
  }
}

function showEmptyState(gridElement) {
  const videoLimit = {{{subscription.limits.videos}}};
  const uploadAction = videoLimit > 0 
    ? `<a href="/videos/upload" class="btn btn-primary">Upload Video</a>`
    : `<a href="/subscription/upgrade" class="btn btn-primary">Upgrade to Upload Videos</a>`;
    
  gridElement.innerHTML = `
    <div class="empty-state">
      <h3>No videos yet</h3>
      <p>${videoLimit > 0 ? 'Upload your first video to get started.' : 'Upgrade your plan to start uploading videos.'}</p>
      ${uploadAction}
    </div>
  `;
}

// Pagination functions
function updatePagination(pagination) {
  if (!pagination) return;
  
  totalPages = pagination.totalPages;
  currentPage = pagination.currentPage;
  
  const paginationContainer = document.getElementById('pagination-container');
  const paginationInfo = document.getElementById('pagination-info');
  const prevPageBtn = document.getElementById('prev-page');
  const nextPageBtn = document.getElementById('next-page');
  
  // Update pagination info
  paginationInfo.textContent = `Showing ${pagination.startIndex}-${pagination.endIndex} of ${pagination.totalRecords} videos`;
  
  // Update navigation buttons
  prevPageBtn.disabled = currentPage <= 1;
  nextPageBtn.disabled = currentPage >= totalPages;
  
  // Update page numbers
  renderPageNumbers();
  
  // Show/hide pagination
  paginationContainer.style.display = totalPages > 1 ? 'flex' : 'none';
}

function renderPageNumbers() {
  const pageNumbers = document.getElementById('page-numbers');
  const maxVisible = 5;
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);
  
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }
  
  let pageHTML = '';
  
  for (let i = startPage; i <= endPage; i++) {
    pageHTML += `<button class="page-number ${i === currentPage ? 'active' : ''}" onclick="goToPage(${i})">${i}</button>`;
  }
  
  pageNumbers.innerHTML = pageHTML;
}

function goToPage(page) {
  currentPage = page;
  loadCompletedVideos();
}

// Setup filtering and pagination event listeners
function setupFilteringEventListeners() {
  const statusFilter = document.getElementById('status-filter');
  const sortOrder = document.getElementById('sort-order');
  const prevPageBtn = document.getElementById('prev-page');
  const nextPageBtn = document.getElementById('next-page');
  
  // Filter event listeners
  if (statusFilter) {
    statusFilter.addEventListener('change', function() {
      currentFilters.status = this.value;
      currentPage = 1;
      loadCompletedVideos();
    });
  }
  
  if (sortOrder) {
    sortOrder.addEventListener('change', function() {
      currentFilters.sort = this.value;
      currentPage = 1;
      loadCompletedVideos();
    });
  }
  
  // Pagination event listeners
  if (prevPageBtn) {
    prevPageBtn.addEventListener('click', function() {
      if (currentPage > 1) {
        currentPage--;
        loadCompletedVideos();
      }
    });
  }
  
  if (nextPageBtn) {
    nextPageBtn.addEventListener('click', function() {
      if (currentPage < totalPages) {
        currentPage++;
        loadCompletedVideos();
      }
    });
  }
}

// Setup event listeners for video card content buttons
function setupVideoCardEventListeners() {
  // Content view buttons in video cards
  const contentViewButtons = document.querySelectorAll('.view-content-btn-grid');
  contentViewButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const videoId = button.getAttribute('data-video-id');
      const contentType = button.getAttribute('data-content-type');
      const contentLabel = button.getAttribute('data-content-label');
      
      if (statusManager) {
        statusManager.viewContent(videoId, contentType, contentLabel);
      }
    });
  });

  // "View All Content" buttons for videos with many content types
  const viewAllButtons = document.querySelectorAll('.view-all-content-btn');
  viewAllButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const videoId = button.getAttribute('data-video-id');
      const videoTitle = button.getAttribute('data-video-title');
      
      if (statusManager) {
        statusManager.showAllContentModal(videoId, videoTitle);
      }
    });
  });
}

// Refresh completed videos when processing status changes
function refreshCompletedVideos() {
  loadCompletedVideos();
}

// Populate processing table with pending videos from API
async function populateProcessingTable() {
  try {
    const videosResponse = await fetch('/api/videos?limit=20'); // Get more videos to find pending ones
    
    if (!videosResponse.ok) {
      throw new Error(`HTTP ${videosResponse.status}: ${videosResponse.statusText}`);
    }
    
    const videosData = await videosResponse.json();
    
    if (videosData.success && videosData.data?.videos?.length > 0) {
      // Find videos that are pending/processing
      const pendingVideos = videosData.data.videos.filter(video => {
        return video.status === 'pending' || video.status === 'processing' || video.status === 'importing';
      });
      
      
      if (pendingVideos.length > 0 && statusManager) {
        // Add pending videos to processing status manager (but skip cancelled ones)
        pendingVideos.forEach(video => {
          // Skip videos that have been cancelled
          if (statusManager.cancelledVideos.has(video.videoid)) {
            return;
          }
          
          // Also skip if already in processing manager (avoid duplicates)
          if (statusManager.processingVideos.has(video.videoid)) {
            return;
          }
          
          const mockStatus = {
            videoId: video.videoid,
            videoRecordId: video.id,
            videoTitle: video.video_title || 'Untitled Video',
            userId: 'current-user',
            startTime: video.created_at || new Date().toISOString(),
            lastUpdate: new Date().toISOString(),
            transcript: { status: 'pending', completedAt: null },
            content: {
              summary_text: { status: 'pending', completedAt: null },
              study_guide_text: { status: 'pending', completedAt: null },
              discussion_guide_text: { status: 'pending', completedAt: null },
              group_guide_text: { status: 'pending', completedAt: null },
              social_media_text: { status: 'pending', completedAt: null },
              quiz_text: { status: 'pending', completedAt: null },
              chapters_text: { status: 'pending', completedAt: null }
            },
            completed: false
          };
          
          statusManager.processingVideos.set(video.videoid, mockStatus);
        });
        
        // Update the processing table
        statusManager.updateStatusTable();
        statusManager.showProcessingDashboard();
        
        // Refresh completed videos to remove any that are now in processing table
        refreshCompletedVideos();
      }
    }
  } catch (error) {
    // Handle error silently
  }
}

</script>

<!-- Video Processing Accordion Styles -->
<style>
/* Accordion Container */
.status-accordion-container {
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  overflow: hidden;
}

/* Individual Video Accordion */
.video-accordion {
  border-bottom: 1px solid #e2e8f0;
  overflow: hidden;
}

.video-accordion:last-child {
  border-bottom: none;
}

/* Accordion Header Wrapper */
.accordion-header-wrapper {
  display: flex;
  background-color: #f8f9fa;
  border: none;
}

/* Accordion Header Button */
.accordion-header {
  flex: 1;
  display: flex;
  justify-content: space-between;
  align-items: flex-start; /* Change from center to flex-start for multi-line titles */
  padding: 15px 20px;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 16px;
  text-align: left;
  transition: background-color 0.2s ease;
}

.accordion-header:hover {
  background-color: #e9ecef;
}

.accordion-header.expanded {
  background-color: #e9ecef;
}

/* Video Info */
.video-info {
  flex: 0.2;
  min-width: 0; /* Allow flex item to shrink smaller than its content */
}

.video-title {
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 4px;
  font-size: 14px;
  line-height: 1.3;
  word-wrap: break-word;
  overflow-wrap: break-word;
  /* min-width: max-content; */
}

.video-meta {
  display: flex;
  gap: 15px;
  font-size: 12px;
  color: #718096;
}

.video-time, .video-progress {
  font-size: 12px;
  color: #666;
}

/* Chevron */
.accordion-chevron {
  font-size: 14px;
  color: #718096;
  margin-left: 15px;
  margin-top: 2px; /* Add slight top margin to align with first line of title */
  transition: transform 0.2s ease;
  flex-shrink: 0; /* Prevent chevron from shrinking */
}

/* Cancel Button */
.cancel-button {
  background-color: #dc3545;
  color: white;
  border: none;
  padding: 10px 16px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: background-color 0.2s ease;
  border-radius: 0;
}

.cancel-button:hover {
  background-color: #c82333;
}

/* Accordion Content */
.accordion-content {
  background-color: white;
  border-top: 1px solid #e2e8f0;
  transition: max-height 0.3s ease, opacity 0.3s ease;
  max-height: 500px;
  opacity: 1;
}

.accordion-content.hidden {
  max-height: 0;
  opacity: 0;
  overflow: hidden;
}

/* Processing List */
.processing-list {
  list-style: none;
  padding: 0;
  margin: 15px 20px;
}

.processing-item {
  display: flex;
  align-items: center;
  padding: 8px 0;
  border-bottom: 1px solid #f1f5f9;
}

.processing-item:last-child {
  border-bottom: none;
}

/* Status Indicator */
.status-indicator {
  margin-right: 12px;
}

.status-box {
  width: 24px;
  height: 24px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 14px;
  color: white;
}

.status-box.status-completed {
  background-color: #28a745;
}

.status-box.status-pending {
  background-color: #ffc107;
  color: #333;
}

.status-box.status-failed {
  background-color: #dc3545;
}

.status-box.status-skipped {
  background-color: #6c757d;
}

/* Content Info */
.content-info {
  flex: 1;
  display: flex;
  align-items: center;
  gap: 8px;
}

/* Content Actions */
.content-actions {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-left: auto;
}

.content-icon {
  font-size: 16px;
}

.content-label {
  font-size: 14px;
  color: #374151;
  font-weight: 500;
}

/* View Content Button */
.view-content-btn {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  background: #f8f9fa;
  border: 1px solid #dee2e6;
  color: #495057;
  border-radius: 4px;
  font-size: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.view-content-btn:hover {
  background: #e9ecef;
  border-color: #adb5bd;
  color: #343a40;
}

.view-content-btn svg {
  width: 14px;
  height: 14px;
}

/* Error Info */
.error-info {
  color: #dc3545;
  font-size: 16px;
  cursor: help;
}

/* Responsive Design */
@media (max-width: 768px) {
  .accordion-header {
    padding: 12px 15px;
  }
  
  .video-title {
    font-size: 13px;
  }
  
  .video-meta {
    font-size: 11px;
    gap: 10px;
  }
  
  .cancel-button {
    padding: 8px 12px;
    font-size: 13px;
  }
  
  .processing-list {
    margin: 10px 15px;
  }
  
  .content-label {
    font-size: 13px;
  }
}

/* Override table styles when using accordion */
.status-table-container {
  display: none;
}

/* Cancel Notification Styles */
.cancel-notification {
  position: fixed;
  top: 20px;
  right: 20px;
  max-width: 400px;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  z-index: 10001;
  opacity: 0;
  transform: translateX(100%);
  transition: all 0.3s ease;
}

.cancel-notification.show {
  opacity: 1;
  transform: translateX(0);
}

.cancel-notification-success {
  background-color: #d4edda;
  border: 1px solid #c3e6cb;
  color: #155724;
}

.cancel-notification-error {
  background-color: #f8d7da;
  border: 1px solid #f5c6cb;
  color: #721c24;
}

.cancel-notification-info {
  background-color: #d1ecf1;
  border: 1px solid #bee5eb;
  color: #0c5460;
}

.cancel-notification-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.cancel-notification-message {
  flex: 1;
  font-weight: 500;
}

.cancel-notification-close {
  background: none;
  border: none;
  font-size: 18px;
  cursor: pointer;
  margin-left: 10px;
  color: inherit;
  opacity: 0.7;
}

.cancel-notification-close:hover {
  opacity: 1;
}

/* Loading state for cancel button */
.cancel-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Confirmation Modal Styles */
.confirmation-modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.confirmation-modal-backdrop.show {
  opacity: 1;
}

.confirmation-modal {
  background: white;
  border-radius: 12px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
  max-width: 500px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.confirmation-modal-backdrop.show .confirmation-modal {
  transform: scale(1);
}

.confirmation-modal-header {
  padding: 24px 24px 0 24px;
  border-bottom: 1px solid #f1f5f9;
  margin-bottom: 20px;
}

.confirmation-modal-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: #1f2937;
  text-align: center;
}

.confirmation-modal-body {
  padding: 0 24px 20px 24px;
}

.confirmation-message {
  font-size: 1rem;
  color: #374151;
  margin-bottom: 12px;
  text-align: center;
  line-height: 1.5;
}

.confirmation-details {
  font-size: 0.875rem;
  color: #6b7280;
  background: #f8fafc;
  padding: 12px 16px;
  border-radius: 8px;
  border-left: 4px solid #fbbf24;
  text-align: center;
  line-height: 1.4;
}

.confirmation-modal-footer {
  padding: 20px 24px 24px 24px;
  display: flex;
  gap: 12px;
  justify-content: center;
}

.confirmation-modal-footer .btn {
  min-width: 120px;
  padding: 10px 20px;
  border-radius: 8px;
  font-weight: 500;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
}

.btn-secondary {
  background: #f1f5f9;
  color: #374151;
  border: 1px solid #d1d5db;
}

.btn-secondary:hover {
  background: #e2e8f0;
  transform: translateY(-1px);
}

.btn-secondary:focus {
  outline: none;
  ring: 2px solid #3b82f6;
  ring-offset: 2px;
}

.btn-danger {
  background: #dc2626;
  color: white;
}

.btn-danger:hover {
  background: #b91c1c;
  transform: translateY(-1px);
}

.btn-danger:focus {
  outline: none;
  ring: 2px solid #dc2626;
  ring-offset: 2px;
}

/* Responsive Design for Modal */
@media (max-width: 768px) {
  .confirmation-modal {
    margin: 20px;
    max-width: none;
  }
  
  .confirmation-modal-header,
  .confirmation-modal-body,
  .confirmation-modal-footer {
    padding-left: 16px;
    padding-right: 16px;
  }
  
  .confirmation-modal-footer {
    flex-direction: column;
  }
  
  .confirmation-modal-footer .btn {
    width: 100%;
  }
}

/* Library Controls */
.library-controls {
  display: flex;
  gap: 1rem;
  align-items: center;
}

.library-controls .form-input {
  min-width: 150px;
}

/* Pagination */
.pagination-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 2rem;
  padding: 1rem 0;
  border-top: 1px solid #e2e8f0;
}

.pagination-controls {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.pagination-info {
  color: var(--text-secondary, #64748b);
  font-size: 0.875rem;
}

#page-numbers {
  display: flex;
  gap: 0.25rem;
}

.page-number {
  padding: 0.5rem 0.75rem;
  border: 1px solid #e2e8f0;
  background: white;
  cursor: pointer;
  border-radius: 4px;
  font-size: 0.875rem;
  transition: all 0.2s ease;
}

.page-number:hover {
  background: #f8fafc;
  border-color: var(--accent-color, #C39D43);
}

.page-number.active {
  background: var(--accent-color, #C39D43);
  border-color: var(--accent-color, #C39D43);
  color: white;
}

@media (max-width: 768px) {
  .library-controls {
    flex-direction: column;
    gap: 0.5rem;
    align-items: stretch;
  }
  
  .pagination-container {
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }
  
  .pagination-controls {
    flex-wrap: wrap;
    justify-content: center;
  }
}

/* Content Modal Styles */
.content-modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2001;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.content-modal-backdrop.show {
  opacity: 1;
}

.content-modal {
  background: white;
  border-radius: 12px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
  max-width: 800px;
  width: 90%;
  max-height: 90vh;
  display: flex;
  flex-direction: column;
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.content-modal-backdrop.show .content-modal {
  transform: scale(1);
}

.content-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 24px;
  border-bottom: 1px solid #e2e8f0;
  flex-shrink: 0;
}

.content-modal-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: #1f2937;
}

.content-modal-close {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  padding: 4px;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.content-modal-close:hover {
  background: #f3f4f6;
  color: #374151;
}

.content-modal-body {
  flex: 1;
  overflow-y: auto;
  padding: 24px;
}

.content-display {
  line-height: 1.6;
  color: #374151;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.content-display strong {
  color: #1f2937;
  font-weight: 600;
}

.hashtag {
  color: #1d4ed8;
  font-weight: 500;
}

.content-modal-footer {
  padding: 20px 24px;
  border-top: 1px solid #e2e8f0;
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  flex-shrink: 0;
}

.content-modal-footer .btn {
  padding: 8px 16px;
  border-radius: 6px;
  font-weight: 500;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
}

.copy-content-btn {
  background: #f1f5f9;
  color: #374151;
  border: 1px solid #d1d5db;
}

.copy-content-btn:hover {
  background: #e2e8f0;
}

.content-modal-close-btn {
  background: #3b82f6;
  color: white;
}

.content-modal-close-btn:hover {
  background: #2563eb;
}

/* Loading Modal Styles */
.loading-modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.4);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2002;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.loading-modal-backdrop.show {
  opacity: 1;
}

.loading-modal {
  background: white;
  border-radius: 8px;
  padding: 30px;
  text-align: center;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.loading-spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #f3f4f6;
  border-top: 4px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 16px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-modal p {
  margin: 0;
  color: #6b7280;
  font-size: 0.875rem;
}

/* Video Card Content Buttons */
.video-content-summary {
  margin-top: 8px;
  font-size: 0.75rem;
  color: #6b7280;
}

.content-count {
  background: #f3f4f6;
  padding: 2px 6px;
  border-radius: 12px;
  font-size: 0.7rem;
}

.video-actions {
  margin-top: 12px;
  padding-top: 12px;
  border-top: 1px solid #f3f4f6;
}

.content-buttons-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 6px;
}

.view-content-btn-grid {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 6px 8px;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 4px;
  font-size: 0.75rem;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: left;
  min-height: 32px;
}

.view-content-btn-grid:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
}

.view-content-btn-grid .content-icon {
  font-size: 14px;
  flex-shrink: 0;
}

.view-content-btn-grid .content-label {
  font-size: 0.7rem;
  color: #374151;
  font-weight: 500;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.view-all-content-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 4px;
  padding: 6px 8px;
  background: #e0e7ff;
  border: 1px solid #c7d2fe;
  border-radius: 4px;
  font-size: 0.75rem;
  color: #3730a3;
  cursor: pointer;
  transition: all 0.2s ease;
  min-height: 32px;
}

.view-all-content-btn:hover {
  background: #c7d2fe;
  border-color: #a5b4fc;
}

/* Content List Modal */
.content-list-modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2001;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.content-list-modal-backdrop.show {
  opacity: 1;
}

.content-list-modal {
  background: white;
  border-radius: 12px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
  max-width: 600px;
  width: 90%;
  max-height: 80vh;
  display: flex;
  flex-direction: column;
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.content-list-modal-backdrop.show .content-list-modal {
  transform: scale(1);
}

.content-list-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 24px;
  border-bottom: 1px solid #e2e8f0;
  flex-shrink: 0;
}

.content-list-modal-header h3 {
  margin: 0;
  font-size: 1.125rem;
  font-weight: 600;
  color: #1f2937;
}

.content-list-modal-body {
  flex: 1;
  overflow-y: auto;
  padding: 24px;
}

.content-list-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 12px;
}

.content-list-item {
  display: flex;
  align-items: center;
  padding: 16px;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: left;
}

.content-list-item:hover {
  background: #f1f5f9;
  border-color: #3b82f6;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.content-list-icon {
  font-size: 24px;
  margin-right: 12px;
  flex-shrink: 0;
}

.content-list-label {
  flex: 1;
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
}

.content-list-action {
  font-size: 0.75rem;
  color: #6b7280;
  margin-left: 8px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.content-list-item:hover .content-list-action {
  opacity: 1;
}

.content-list-modal-footer {
  padding: 20px 24px;
  border-top: 1px solid #e2e8f0;
  display: flex;
  justify-content: flex-end;
  flex-shrink: 0;
}

/* Responsive Content Modal */
@media (max-width: 768px) {
  .content-modal {
    width: 95%;
    max-height: 95vh;
  }
  
  .content-modal-header,
  .content-modal-body,
  .content-modal-footer {
    padding-left: 16px;
    padding-right: 16px;
  }
  
  .content-modal-footer {
    flex-direction: column;
  }
  
  .content-modal-footer .btn {
    width: 100%;
  }

  .content-buttons-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .view-content-btn-grid .content-label {
    font-size: 0.65rem;
  }
  
  .content-list-grid {
    grid-template-columns: 1fr;
  }
  
  .content-list-modal {
    width: 95%;
  }
  
  .content-list-modal-header,
  .content-list-modal-body,
  .content-list-modal-footer {
    padding-left: 16px;
    padding-right: 16px;
  }
}
</style>

{{/layouts/main}}