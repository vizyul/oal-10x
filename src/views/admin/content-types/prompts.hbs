<div class="admin-prompts-page">
  <div class="page-header">
    <div class="header-left">
      <h1>ü§ñ AI Prompts: {{contentType.label}}</h1>
      <p class="subtitle">Manage AI prompts for {{contentType.icon}} {{contentType.label}}</p>
      <div class="breadcrumb">
        <a href="/admin">Admin</a> ‚Üí 
        <a href="/admin/content-types">Content Types</a> ‚Üí 
        <a href="/admin/content-types/{{contentType.id}}">{{contentType.label}}</a> ‚Üí 
        <span>AI Prompts</span>
      </div>
    </div>
    <div class="header-right">
      <button id="addPromptBtn" class="btn btn-primary">
        <span>‚ûï</span> Add AI Prompt
      </button>
    </div>
  </div>

  <!-- Error Message Container -->
  <div id="errorMessage" class="alert alert-error" style="display: none;">
    <span class="error-text"></span>
    <button class="close-error" onclick="hideError()">&times;</button>
  </div>

  <!-- Success Message Container -->
  <div id="successMessage" class="alert alert-success" style="display: none;">
    <span class="success-text"></span>
    <button class="close-success" onclick="hideSuccess()">&times;</button>
  </div>

<style>
.alert {
  padding: 15px 20px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 8px;
  position: relative;
  font-weight: 500;
}

.alert-error {
  background-color: #f8d7da;
  border-color: #f5c6cb;
  color: #721c24;
}

.alert-success {
  background-color: #d4edda;
  border-color: #c3e6cb;
  color: #155724;
}

.alert button {
  position: absolute;
  top: 10px;
  right: 15px;
  background: none;
  border: none;
  font-size: 18px;
  font-weight: bold;
  cursor: pointer;
  padding: 0;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.alert-error button {
  color: #721c24;
}

.alert-success button {
  color: #155724;
}

.alert button:hover {
  opacity: 0.7;
}
</style>

  <!-- New Prompt Form (for Add AI Prompt button) -->
  <div id="newPromptEditor" class="prompt-editor" style="display: none;">
    <div class="editor-header">
      <h2>Add New AI Prompt</h2>
      <div class="editor-actions">
        <button id="cancelNewPromptBtn" class="btn btn-secondary">Cancel</button>
        <button id="saveNewPromptBtn" class="btn btn-primary">
          <span>Create Prompt</span>
        </button>
      </div>
    </div>
    
    <form id="newPromptForm" class="editor-form">
      <div class="form-row">
        <div class="form-group">
          <label class="required">Prompt Name</label>
          <input type="text" id="newPromptName" name="name" class="form-control" required
                 placeholder="e.g., Blog Post Generator">
        </div>
        
        <div class="form-group">
          <label class="required">AI Provider</label>
          <select id="newAiProvider" name="ai_provider" class="form-control" required>
            <option value="">Select Provider...</option>
            {{#each availableProviders}}
              <option value="{{this}}">{{this}}</option>
            {{/each}}
          </select>
        </div>
      </div>

      <div class="form-group">
        <label>Description</label>
        <input type="text" id="newPromptDescription" name="description" class="form-control"
               placeholder="Brief description of what this prompt does">
      </div>

      <div class="form-row">
        <div class="form-group">
          <label>Temperature</label>
          <input type="number" id="newTemperature" name="temperature" class="form-control"
                 min="0" max="2" step="0.1" value="0.7">
          <small class="form-help">Creativity level (0 = focused, 2 = creative)</small>
        </div>
        
        <div class="form-group">
          <label>Max Tokens</label>
          <input type="number" id="newMaxTokens" name="max_tokens" class="form-control"
                 min="1" max="100000" value="50000">
          <small class="form-help">Maximum response length</small>
        </div>
      </div>

      <div class="form-group">
        <label>System Prompt</label>
        <textarea id="newSystemMessage" name="system_message" rows="3" class="form-control"
                  placeholder="Optional system instructions for the AI..."></textarea>
        <small class="form-help">Optional instructions that set the AI's behavior and context</small>
      </div>

      <div class="form-group">
        <label class="required">User Prompt</label>
        <textarea id="newPromptText" name="prompt_text" rows="15" class="form-control large-textarea" required
                  placeholder="Enter your detailed prompt here... This can be up to 50,000 characters."></textarea>
        <small class="form-help">
          <span id="newCharCount">0</span> / 50,000 characters
        </small>
      </div>

      <div class="form-group">
        <div class="checkbox-group">
          <input type="checkbox" id="newIsActive" name="is_active" checked>
          <label for="newIsActive">
            <strong>‚úÖ Active</strong>
            <span class="checkbox-help">Make this prompt available for use</span>
          </label>
        </div>
      </div>
    </form>
  </div>

  {{#if prompts}}
    {{#if prompts.length}}
      <div class="prompts-grid">
      {{#each prompts}}
        <div class="prompt-card {{#unless is_active}}inactive{{/unless}}" data-prompt-id="{{id}}">
          <!-- Preview State (default) -->
          <div class="card-preview">
            <div class="card-header">
              <div class="prompt-info">
                <h3>{{name}}</h3>
                <div class="prompt-meta">
                  <span class="provider-badge provider-{{ai_provider}}">{{ai_provider}}</span>
                  {{#if is_active}}
                    <span class="status-badge active">‚úÖ Active</span>
                  {{else}}
                    <span class="status-badge inactive">‚≠ï Inactive</span>
                  {{/if}}
                </div>
              </div>
              <div class="card-actions">
                <button class="btn btn-sm btn-outline edit-prompt-btn" data-prompt-id="{{id}}">
                  ‚úèÔ∏è Edit
                </button>
                <button class="btn btn-sm btn-danger delete-prompt-btn" data-prompt-id="{{id}}">
                  üóëÔ∏è Delete
                </button>
              </div>
            </div>

            <div class="card-body">
              {{#if description}}
                <p class="description">{{description}}</p>
              {{/if}}

              <div class="prompt-settings">
                <div class="setting-item">
                  <span class="label">Temperature:</span>
                  <span class="value">{{temperature}}</span>
                </div>
                <div class="setting-item">
                  <span class="label">Max Tokens:</span>
                  <span class="value">{{max_tokens}}</span>
                </div>
              </div>

              <div class="prompt-preview">
                {{#if system_message}}
                  <h4>System Prompt Preview:</h4>
                  <div class="system-message">
                    {{#if (gt system_message.length 150)}}
                      {{substring system_message 0 150}}...
                    {{else}}
                      {{system_message}}
                    {{/if}}
                  </div>
                {{/if}}
                <h4>User Prompt Preview:</h4>
                <div class="prompt-text">
                  {{#if (gt prompt_text.length 200)}}
                    {{substring prompt_text 0 200}}...
                  {{else}}
                    {{prompt_text}}
                  {{/if}}
                </div>
              </div>
            </div>
          </div>

          <!-- Edit State (hidden by default) -->
          <div class="card-edit" style="display: none;">
            <div class="card-header">
              <div class="prompt-info">
                <h3>‚úèÔ∏è Editing: <span class="editing-prompt-name">{{name}}</span></h3>
              </div>
              <div class="card-actions">
                <button class="btn btn-sm btn-secondary cancel-edit-btn">Cancel</button>
                <button class="btn btn-sm btn-primary save-edit-btn" data-prompt-id="{{id}}">
                  üíæ Save
                </button>
              </div>
            </div>

            <div class="card-body">
              <form class="inline-edit-form">
                <input type="hidden" class="edit-prompt-id" value="{{id}}">
                
                <div class="form-row">
                  <div class="form-group">
                    <label class="required">Prompt Name</label>
                    <input type="text" class="form-control edit-prompt-name-input" 
                           value="{{name}}" readonly 
                           style="background-color: #f8f9fa; color: #6c757d;">
                    <small class="form-help">Prompt name is auto-generated and cannot be changed</small>
                  </div>
                  
                  <div class="form-group">
                    <label class="required">AI Provider</label>
                    <select class="form-control edit-ai-provider" required>
                      <option value="">Select Provider...</option>
                      {{#each ../availableProviders}}
                        <option value="{{this}}" {{#if (eq this ../ai_provider)}}selected{{/if}}>{{this}}</option>
                      {{/each}}
                    </select>
                  </div>
                </div>

                <div class="form-group">
                  <label>Description</label>
                  <input type="text" class="form-control edit-description" 
                         value="{{description}}" 
                         placeholder="Brief description of what this prompt does">
                </div>

                <div class="form-row">
                  <div class="form-group">
                    <label>Temperature</label>
                    <input type="number" class="form-control edit-temperature" 
                           value="{{temperature}}" min="0" max="2" step="0.1">
                    <small class="form-help">Creativity level (0 = focused, 2 = creative)</small>
                  </div>
                  
                  <div class="form-group">
                    <label>Max Tokens</label>
                    <input type="number" class="form-control edit-max-tokens" 
                           value="{{max_tokens}}" min="1" max="100000">
                    <small class="form-help">Maximum response length</small>
                  </div>
                </div>

                <div class="form-group">
                  <label>System Prompt</label>
                  <textarea class="form-control edit-system-message" rows="3"
                            placeholder="Optional system instructions for the AI...">{{system_message}}</textarea>
                  <small class="form-help">Optional instructions that set the AI's behavior and context</small>
                </div>

                <div class="form-group">
                  <label class="required">User Prompt</label>
                  <textarea class="form-control edit-prompt-text large-textarea" rows="12" required
                            placeholder="Enter your detailed prompt here...">{{prompt_text}}</textarea>
                  <small class="form-help">
                    <span class="edit-char-count">0</span> / 50,000 characters
                  </small>
                </div>

                <div class="form-group">
                  <div class="checkbox-group">
                    <input type="checkbox" class="edit-is-active" {{#if is_active}}checked{{/if}}>
                    <label>
                      <strong>‚úÖ Active</strong>
                      <span class="checkbox-help">Make this prompt available for use</span>
                    </label>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      {{/each}}
      </div>
    {{else}}
      <div class="empty-state">
        <div class="empty-icon">ü§ñ</div>
        <h3>No AI Prompts Configured</h3>
        <p>This content type doesn't have any AI prompts yet. Add your first prompt to enable AI content generation.</p>
        <button id="addFirstPromptBtn" class="btn btn-primary">
          ‚ûï Add First AI Prompt
        </button>
      </div>
    {{/if}}
  {{else}}
    <div class="empty-state">
      <div class="empty-icon">ü§ñ</div>
      <h3>No AI Prompts Configured</h3>
      <p>This content type doesn't have any AI prompts yet. Add your first prompt to enable AI content generation.</p>
      <button id="addFirstPromptBtn" class="btn btn-primary">
        ‚ûï Add First AI Prompt
      </button>
    </div>
  {{/if}}
</div>


<style>
.admin-prompts-page {
  max-width: none;
  margin: 0 auto;
  padding: 20px;
}

/* Inline Prompt Editor Styles */
.prompt-editor {
  background: white;
  border: 2px solid #667eea;
  border-radius: 12px;
  margin-bottom: 30px;
  box-shadow: 0 4px 20px rgba(102, 126, 234, 0.15);
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.editor-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 30px;
  border-bottom: 2px solid #f0f0f0;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 10px 10px 0 0;
}

.editor-header h2 {
  margin: 0;
  font-size: 1.5em;
  font-weight: 600;
}

.editor-actions {
  display: flex;
  gap: 10px;
}

.editor-form {
  padding: 30px;
}

.editor-form .large-textarea {
  min-height: 400px;
  font-family: 'Courier New', monospace;
  line-height: 1.6;
  resize: vertical;
}

/* Card Edit State Styles */
.card-edit {
  animation: slideIn 0.3s ease-out;
}

.card-edit .card-header {
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  border-radius: 10px 10px 0 0;
}

.card-edit .card-header h3 {
  margin: 0;
  color: white;
}

.card-edit .editing-prompt-name {
  font-weight: normal;
  opacity: 0.9;
}

.card-edit .inline-edit-form {
  padding: 0;
}

.card-edit .large-textarea {
  min-height: 300px;
  font-family: 'Courier New', monospace;
  line-height: 1.6;
  resize: vertical;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 30px;
  flex-wrap: wrap;
  gap: 20px;
}

.header-left h1 {
  color: #333;
  margin-bottom: 5px;
}

.subtitle {
  color: #666;
  margin: 0 0 10px 0;
}

.breadcrumb {
  color: #999;
  font-size: 0.9em;
}

.breadcrumb a {
  color: #667eea;
  text-decoration: none;
}

.breadcrumb a:hover {
  text-decoration: underline;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 10px 16px;
  border: none;
  border-radius: 6px;
  text-decoration: none;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-primary {
  background: #667eea;
  color: white;
}

.btn-primary:hover {
  background: #5a6fd8;
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn-outline {
  background: white;
  color: #667eea;
  border: 1px solid #667eea;
}

.btn-outline:hover {
  background: #667eea;
  color: white;
}

.btn-danger {
  background: #dc3545;
  color: white;
}

.btn-danger:hover {
  background: #c82333;
}

.btn-sm {
  padding: 6px 12px;
  font-size: 0.875em;
}

.prompts-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

.prompt-card {
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 10px;
  overflow: hidden;
  transition: all 0.3s ease;
}

.prompt-card:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.prompt-card.inactive {
  opacity: 0.7;
  border-color: #ffc107;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: 20px 20px 15px 20px;
  border-bottom: 1px solid #f0f0f0;
}

.prompt-info h3 {
  margin: 0 0 10px 0;
  color: #333;
}

.prompt-meta {
  display: flex;
  gap: 10px;
  align-items: center;
}

.provider-badge {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.75em;
  font-weight: 500;
  text-transform: uppercase;
}

.provider-openai { background: #74aa9c; color: white; }
.provider-google, .provider-gemini { background: #4285f4; color: white; }
.provider-claude { background: #d4700a; color: white; }
.provider-chatgpt { background: #10a37f; color: white; }

.status-badge {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.8em;
  font-weight: 500;
}

.status-badge.active {
  background: #d4edda;
  color: #155724;
}

.status-badge.inactive {
  background: #fff3cd;
  color: #856404;
}

.card-actions {
  display: flex;
  gap: 8px;
}

.card-body {
  padding: 15px 20px;
}

.description {
  margin: 0 0 15px 0;
  color: #555;
  line-height: 1.5;
}

.prompt-settings {
  display: flex;
  gap: 20px;
  margin-bottom: 15px;
}

.setting-item {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.setting-item .label {
  font-size: 0.8em;
  color: #666;
  font-weight: 500;
}

.setting-item .value {
  font-weight: 500;
  color: #333;
}

.prompt-preview h4 {
  margin: 15px 0 8px 0;
  color: #333;
  font-size: 0.9em;
  text-transform: uppercase;
  font-weight: 600;
}

.prompt-text, .system-message {
  background: #f8f9fa;
  padding: 12px;
  border-radius: 6px;
  border-left: 4px solid #667eea;
  font-family: 'Courier New', monospace;
  font-size: 0.85em;
  line-height: 1.4;
  color: #333;
  margin-bottom: 10px;
  white-space: normal;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.system-message {
  border-left-color: #28a745;
}

.empty-state {
  text-align: center;
  padding: 80px 20px;
  color: #666;
}

.empty-icon {
  font-size: 5em;
  margin-bottom: 20px;
}

.empty-state h3 {
  margin: 0 0 10px 0;
  color: #333;
}

/* Form Styles for Inline Editor */
.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #333;
}

.form-group label.required::after {
  content: ' *';
  color: #dc3545;
}

.form-control {
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 14px;
  transition: border-color 0.2s ease;
}

.form-control:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-help {
  display: block;
  margin-top: 5px;
  font-size: 0.85em;
  color: #666;
}

.checkbox-group {
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 15px;
  background: #f8f9fa;
}

.checkbox-group input[type="checkbox"] {
  margin-right: 10px;
  transform: scale(1.1);
}

.checkbox-group label {
  margin: 0;
  cursor: pointer;
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.checkbox-help {
  font-size: 0.85em;
  color: #666;
  font-weight: normal;
}

@media (max-width: 1200px) {
  .prompts-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .prompts-grid {
    grid-template-columns: 1fr;
  }
  
  .form-row {
    grid-template-columns: 1fr;
  }
  
  .editor-header {
    flex-direction: column;
    gap: 15px;
    text-align: center;
  }
  
  .editor-form {
    padding: 20px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const newPromptEditor = document.getElementById('newPromptEditor');
  const newPromptText = document.getElementById('newPromptText');
  const newCharCount = document.getElementById('newCharCount');

  // UI-friendly message functions
  function showError(message) {
    const errorDiv = document.getElementById('errorMessage');
    const errorText = errorDiv.querySelector('.error-text');
    errorText.textContent = message;
    errorDiv.style.display = 'block';
    
    // Auto-hide after 8 seconds
    setTimeout(() => {
      hideError();
    }, 8000);
    
    // Scroll to top to show error
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  function hideError() {
    document.getElementById('errorMessage').style.display = 'none';
  }

  function showSuccess(message) {
    const successDiv = document.getElementById('successMessage');
    const successText = successDiv.querySelector('.success-text');
    successText.textContent = message;
    successDiv.style.display = 'block';
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      hideSuccess();
    }, 5000);
    
    // Scroll to top to show success
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  function hideSuccess() {
    document.getElementById('successMessage').style.display = 'none';
  }

  // Make functions globally available
  window.hideError = hideError;
  window.hideSuccess = hideSuccess;

  // Character counter for new prompt form
  newPromptText.addEventListener('input', function() {
    const count = this.value.length;
    newCharCount.textContent = count.toLocaleString();
    
    if (count > 50000) {
      newCharCount.style.color = '#dc3545';
      this.style.borderColor = '#dc3545';
    } else if (count > 45000) {
      newCharCount.style.color = '#ffc107';
      this.style.borderColor = '#ffc107';
    } else {
      newCharCount.style.color = '#666';
      this.style.borderColor = '#ddd';
    }
  });

  // Function to setup character counter for edit forms
  function setupCharCounter(textarea, counterSpan) {
    textarea.addEventListener('input', function() {
      const count = this.value.length;
      counterSpan.textContent = count.toLocaleString();
      
      if (count > 50000) {
        counterSpan.style.color = '#dc3545';
        this.style.borderColor = '#dc3545';
      } else if (count > 45000) {
        counterSpan.style.color = '#ffc107';
        this.style.borderColor = '#ffc107';
      } else {
        counterSpan.style.color = '#666';
        this.style.borderColor = '#ddd';
      }
    });
    
    // Initialize counter
    textarea.dispatchEvent(new Event('input'));
  }

  // Card-based editing functions
  function editPromptInCard(promptCard, promptData) {
    const cardPreview = promptCard.querySelector('.card-preview');
    const cardEdit = promptCard.querySelector('.card-edit');
    
    // Hide preview, show edit form
    cardPreview.style.display = 'none';
    cardEdit.style.display = 'block';
    
    // Get the prompt data
    const prompt = promptData.prompt || promptData;
    
    // Populate the inline edit form
    const form = cardEdit.querySelector('.inline-edit-form');
    form.querySelector('.edit-prompt-id').value = prompt.id || '';
    form.querySelector('.edit-prompt-name-input').value = prompt.name || '';
    form.querySelector('.edit-ai-provider').value = prompt.ai_provider || '';
    form.querySelector('.edit-description').value = prompt.description || '';
    form.querySelector('.edit-temperature').value = prompt.temperature || 0.7;
    form.querySelector('.edit-max-tokens').value = prompt.max_tokens || 50000;
    form.querySelector('.edit-system-message').value = prompt.system_message || '';
    form.querySelector('.edit-prompt-text').value = prompt.prompt_text || '';
    form.querySelector('.edit-is-active').checked = prompt.is_active !== false;
    
    // Setup character counter for this edit form
    const textarea = form.querySelector('.edit-prompt-text');
    const counter = form.querySelector('.edit-char-count');
    setupCharCounter(textarea, counter);
    
    // Scroll to the card
    promptCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }
  
  function cancelEditInCard(promptCard) {
    const cardPreview = promptCard.querySelector('.card-preview');
    const cardEdit = promptCard.querySelector('.card-edit');
    
    // Show preview, hide edit form
    cardEdit.style.display = 'none';
    cardPreview.style.display = 'block';
  }
  
  function openNewPromptEditor() {
    newPromptEditor.style.display = 'block';
    newPromptEditor.scrollIntoView({ behavior: 'smooth', block: 'start' });
    
    // Reset form
    document.getElementById('newPromptForm').reset();
    document.getElementById('newIsActive').checked = true;
    newCharCount.textContent = '0';
  }
  
  function closeNewPromptEditor() {
    newPromptEditor.style.display = 'none';
    document.getElementById('newPromptForm').reset();
  }

  // Event listeners for new prompt form
  document.getElementById('addPromptBtn').addEventListener('click', openNewPromptEditor);
  document.getElementById('addFirstPromptBtn')?.addEventListener('click', openNewPromptEditor);
  
  document.getElementById('cancelNewPromptBtn').addEventListener('click', closeNewPromptEditor);
  
  // Save new prompt button
  document.getElementById('saveNewPromptBtn').addEventListener('click', function(e) {
    e.preventDefault();
    
    const form = document.getElementById('newPromptForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    // Handle checkbox
    data.is_active = document.getElementById('newIsActive').checked;
    
    const url = `/admin/content-types/{{contentType.id}}/prompts`;
    const method = 'POST';
    
    savePrompt(url, method, data, closeNewPromptEditor);
  });
  
  async function savePrompt(url, method, data, onSuccessCallback) {
    try {
      const response = await fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      
      if (response.ok) {
        onSuccessCallback();
        showSuccess('AI prompt saved successfully');
        setTimeout(() => location.reload(), 1500);
      } else {
        showError('Error: ' + (result.error || 'Failed to save prompt'));
      }
    } catch (error) {
      showError('Error saving prompt: ' + error.message);
    }
  }

  // Edit prompt buttons
  document.querySelectorAll('.edit-prompt-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
      const promptId = this.dataset.promptId;
      const promptCard = this.closest('.prompt-card');
      
      try {
        const response = await fetch(`/admin/api/prompts/${promptId}`);
        if (response.ok) {
          const promptData = await response.json();
          editPromptInCard(promptCard, promptData);
        } else {
          showError('Failed to load prompt data');
        }
      } catch (error) {
        showError('Error loading prompt: ' + error.message);
      }
    });
  });

  // Cancel edit buttons
  document.querySelectorAll('.cancel-edit-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const promptCard = this.closest('.prompt-card');
      cancelEditInCard(promptCard);
    });
  });

  // Save edit buttons  
  document.querySelectorAll('.save-edit-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      
      const promptCard = this.closest('.prompt-card');
      const form = promptCard.querySelector('.inline-edit-form');
      const promptId = this.dataset.promptId;
      
      // Collect form data from the inline form
      const data = {
        name: form.querySelector('.edit-prompt-name-input').value,
        ai_provider: form.querySelector('.edit-ai-provider').value,
        description: form.querySelector('.edit-description').value,
        temperature: parseFloat(form.querySelector('.edit-temperature').value),
        max_tokens: parseInt(form.querySelector('.edit-max-tokens').value),
        system_message: form.querySelector('.edit-system-message').value,
        prompt_text: form.querySelector('.edit-prompt-text').value,
        is_active: form.querySelector('.edit-is-active').checked
      };
      
      const url = `/admin/prompts/${promptId}`;
      const method = 'PUT';
      
      savePrompt(url, method, data, () => cancelEditInCard(promptCard));
    });
  });

  // Delete prompt buttons
  document.querySelectorAll('.delete-prompt-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
      const promptId = this.dataset.promptId;
      
      // Create custom confirmation dialog
      const confirmDelete = window.confirm('Are you sure you want to delete this AI prompt? This action cannot be undone.');
      
      if (confirmDelete) {
        try {
          const response = await fetch(`/admin/prompts/${promptId}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            showSuccess('AI prompt deleted successfully');
            setTimeout(() => location.reload(), 1500);
          } else {
            const error = await response.json();
            showError('Failed to delete prompt: ' + (error.error || 'Unknown error'));
          }
        } catch (error) {
          showError('Error deleting prompt: ' + error.message);
        }
      }
    });
  });


  // Escape key to close editors
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      // Close new prompt editor if open
      if (newPromptEditor.style.display === 'block') {
        closeNewPromptEditor();
        return;
      }
      
      // Close any open card edit forms
      const openEditCards = document.querySelectorAll('.card-edit[style*="block"]');
      openEditCards.forEach(cardEdit => {
        const promptCard = cardEdit.closest('.prompt-card');
        cancelEditInCard(promptCard);
      });
    }
  });
});
</script>